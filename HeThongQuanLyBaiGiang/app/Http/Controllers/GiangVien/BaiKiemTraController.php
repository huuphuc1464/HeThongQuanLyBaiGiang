<?php

namespace App\Http\Controllers\GiangVien;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\BaiKiemTra;
use App\Models\CauHoiBaiKiemTra;
use App\Models\ThongBao;
use App\Services\EmailService;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Shared\Date;

class BaiKiemTraController extends Controller
{
    public function danhSachBaiKiemTra()
    {
        $lopHocPhan = DB::table('lop_hoc_phan')->where('MaNguoiTao', Auth::id())->select('MaLopHocPhan', 'TenLopHocPhan')->get();
        return view('giangvien.quanLyBaiKiemTra.danhSachBaiKiemTra', compact('lopHocPhan'));
    }
    public function importBaiKiemTra(Request $request, EmailService $emailService)
    {
        $request->validate([
            'MaLopHocPhan' => 'required|integer',
            'file' => 'required|file|mimes:xlsx',
        ], [
            'MaLopHocPhan.required' => 'Vui l√≤ng ch·ªçn l·ªõp h·ªçc ph·∫ßn.',
            'MaLopHocPhan.integer' => 'L·ªõp h·ªçc ph·∫ßn kh√¥ng h·ª£p l·ªá.',
            'file.required' => 'Vui l√≤ng ch·ªçn file Excel.',
            'file.file' => 'T·ªáp t·∫£i l√™n ph·∫£i l√† m·ªôt file.',
            'file.mimes' => 'File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xlsx.',
        ]);

        try {
            $file = $request->file('file');
            $spreadsheet = IOFactory::load($file->getRealPath());
            $sheet = $spreadsheet->getActiveSheet();

            $tenBaiKiemTra = trim($sheet->getCell('B1')->getValue());
            $moTa = trim($sheet->getCell('B4')->getValue());
            $trangThaiRaw = strtolower(trim($sheet->getCell('B5')->getValue()));
            $thoiGianBatDauRaw = $sheet->getCell('B2')->getValue();
            $thoiGianKetThucRaw = $sheet->getCell('B3')->getValue();

            try {
                $thoiGianBatDau = is_numeric($thoiGianBatDauRaw)
                    ? Carbon::instance(Date::excelToDateTimeObject($thoiGianBatDauRaw))
                    : Carbon::parse($thoiGianBatDauRaw);

                $thoiGianKetThuc = is_numeric($thoiGianKetThucRaw)
                    ? Carbon::instance(Date::excelToDateTimeObject($thoiGianKetThucRaw))
                    : Carbon::parse($thoiGianBatDauRaw);
            } catch (\Exception $e) {
                return redirect()->back()->with('warning', 'ƒê·ªãnh d·∫°ng ng√†y gi·ªù trong √¥ B2 ho·∫∑c B3 kh√¥ng h·ª£p l·ªá.');
            }

            if (!in_array($trangThaiRaw, ['hi·ªán', '·∫©n'])) {
                return redirect()->back()->with('warning', 'Tr·∫°ng th√°i ph·∫£i l√† "hi·ªán" ho·∫∑c "·∫©n".');
            }

            $trangThai = $trangThaiRaw === 'hi·ªán' ? 1 : 0;
            if (
                empty($tenBaiKiemTra) ||
                empty($thoiGianBatDau) ||
                empty($thoiGianKetThuc) ||
                empty($moTa) ||
                empty($trangThai)
            ) {
                return redirect()->back()->with('warning', 'Th√¥ng tin b√†i ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng.');
            }

            if ($thoiGianKetThuc->lessThanOrEqualTo($thoiGianBatDau)) {
                return redirect()->back()->with('warning', 'Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.');
            }

            if ($thoiGianBatDau->lessThan(Carbon::now())) {
                return redirect()->back()->with('warning', 'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i l·ªõn h∆°n th·ªùi ƒëi·ªÉm hi·ªán t·∫°i.');
            }

            DB::beginTransaction();

            $maLopHocPhan = $request->input('MaLopHocPhan');
            $baiKiemTra = BaiKiemTra::create([
                'MaLopHocPhan' => $maLopHocPhan,
                'MaGiangVien' => Auth::id(),
                'TenBaiKiemTra' => $tenBaiKiemTra,
                'ThoiGianBatDau' => $thoiGianBatDau,
                'ThoiGianKetThuc' => $thoiGianKetThuc,
                'MoTa' => $moTa,
                'TrangThai' => $trangThai,
                'created_at' => now('Asia/Ho_Chi_Minh'),
                'updated_at' => now('Asia/Ho_Chi_Minh')
            ]);

            $highestRow = $sheet->getHighestRow();
            $errors = [];

            for ($row = 7; $row <= $highestRow; $row++) {
                $rowValues = [
                    $sheet->getCell("A$row")->getValue(),
                    $sheet->getCell("B$row")->getValue(),
                    $sheet->getCell("C$row")->getValue(),
                    $sheet->getCell("D$row")->getValue(),
                    $sheet->getCell("E$row")->getValue(),
                    $sheet->getCell("F$row")->getValue(),
                ];

                if (collect($rowValues)->every(fn($v) => is_null($v) || trim($v) === '')) {
                    continue;
                }

                $cauHoi = trim($rowValues[0]);
                $dapAnA = trim($rowValues[1]);
                $dapAnB = trim($rowValues[2]);
                $dapAnC = trim($rowValues[3]);
                $dapAnD = trim($rowValues[4]);
                $dapAnDung = strtoupper(trim($rowValues[5]));

                if (empty($cauHoi)) {
                    $errors[] = "D√≤ng $row: Thi·∫øu c√¢u h·ªèi.";
                    continue;
                }

                if (empty($dapAnA) || empty($dapAnB) || empty($dapAnC) || empty($dapAnD)) {
                    $errors[] = "D√≤ng $row: Thi·∫øu m·ªôt ho·∫∑c nhi·ªÅu ƒë√°p √°n A/B/C/D.";
                    continue;
                }

                if (!in_array($dapAnDung, ['A', 'B', 'C', 'D'])) {
                    $errors[] = "D√≤ng $row: ƒê√°p √°n ƒë√∫ng ph·∫£i l√† m·ªôt trong A, B, C, D.";
                    continue;
                }

                CauHoiBaiKiemTra::create([
                    'MaBaiKiemTra' => $baiKiemTra->MaBaiKiemTra,
                    'CauHoi' => $cauHoi,
                    'DapAnA' => $dapAnA,
                    'DapAnB' => $dapAnB,
                    'DapAnC' => $dapAnC,
                    'DapAnD' => $dapAnD,
                    'DapAnDung' => $dapAnDung,
                    'created_at' => now('Asia/Ho_Chi_Minh'),
                    'updated_at' => now('Asia/Ho_Chi_Minh')
                ]);
            }

            if (!empty($errors)) {
                DB::rollBack();
                $message = 'Import th·∫•t b·∫°i. C√≥ l·ªói trong file Excel.';
                $message .= '<br>L·ªói:<ul><li>' . implode('</li><li>', $errors) . '</li></ul>';
                return redirect()->back()->with('warning', $message);
            }
            if ($baiKiemTra->TrangThai == 1) {
                $noiDungThongBao = 'Gi·∫£ng vi√™n ƒë√£ t·∫°o b√†i ki·ªÉm tra m·ªõi: "' . $tenBaiKiemTra . '" v√†o l·ªõp h·ªçc ph·∫ßn. Vui l√≤ng ki·ªÉm tra v√† chu·∫©n b·ªã.';
                ThongBao::create([
                    'MaLopHocPhan' => $maLopHocPhan,
                    'MaNguoiTao' => Auth::id(),
                    'NoiDung' => $noiDungThongBao,
                    'ThoiGianTao' => now('Asia/Ho_Chi_Minh'),
                    'TrangThai' => 1,
                    'created_at' => now('Asia/Ho_Chi_Minh'),
                    'updated_at' => now('Asia/Ho_Chi_Minh')
                ]);

                $emails = DB::table('danh_sach_lop')
                    ->join('nguoi_dung', 'danh_sach_lop.MaSinhVien', '=', 'nguoi_dung.MaNguoiDung')
                    ->where('danh_sach_lop.MaLopHocPhan', $maLopHocPhan)
                    ->select('nguoi_dung.MaNguoiDung', 'nguoi_dung.HoTen', 'nguoi_dung.Email')
                    ->get();

                $start = \Carbon\Carbon::parse($baiKiemTra->ThoiGianBatDau)->format('H:i:s d/m/Y');
                $end = \Carbon\Carbon::parse($baiKiemTra->ThoiGianKetThuc)->format('H:i:s d/m/Y');
                foreach ($emails as $email) {
                    $studentName = $email->HoTen;
                    $email = $email->Email;
                    $body = "Ch√†o {$studentName},<br><br>";
                    $body .= "{$noiDungThongBao}<br><br>";
                    $body .= "üìÑ T√™n b√†i ki·ªÉm tra: {$baiKiemTra->TenBaiKiemTra}<br>";
                    $body .= "üìÑ M√¥ t·∫£ b√†i ki·ªÉm tra: {$baiKiemTra->MoTa}<br>";
                    $body .= "‚åö Th·ªùi gian b·∫Øt ƒë·∫ßu: {$start}<br>";
                    $body .= "‚è≥ Th·ªùi gian k·∫øt th√∫c: {$end}<br>";
                    $body .= "<br>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng qu·∫£n l√Ω b√†i gi·∫£ng tr·ª±c tuy·∫øn.";

                    try {
                        $emailService->sendEmail($email, 'Th√™m b√†i ki·ªÉm tra m·ªõi', $body);
                    } catch (\Throwable $e) {
                        Log::error("Kh√¥ng th·ªÉ g·ª≠i email ƒë·∫øn {$email}: " . $e->getMessage());
                    }
                }
            }

            DB::commit();
            return redirect()->back()->with('success', 'Import b√†i ki·ªÉm tra v√† c√°c c√¢u h·ªèi th√†nh c√¥ng.');
        } catch (\Exception $e) {
            DB::rollBack();
            $message = 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω.';
            $message .= '<br><strong>Chi ti·∫øt:</strong><ul><li>' . e($e->getMessage()) . '</li></ul>';
            return redirect()->back()->with('warning', $message);
        }
    }
}
