<?php

namespace App\Http\Controllers\GiangVien;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\BaiKiemTra;
use App\Models\CauHoiBaiKiemTra;
use App\Models\ThongBao;
use App\Services\EmailService;
use Carbon\Carbon;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Shared\Date;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\Writer\Xlsx;

class BaiKiemTraController extends Controller
{
    public function danhSachBaiKiemTra(Request $request)
    {
        $query = DB::table('bai_kiem_tra as bkt')
            ->join('lop_hoc_phan as lhp', function ($join) {
                $join->on('lhp.MaLopHocPhan', '=', 'bkt.MaLopHocPhan')
                    ->on('lhp.MaNguoiTao', '=', 'bkt.MaGiangVien');
            })
            ->where('bkt.MaGiangVien', Auth::id())
            ->select('bkt.*', 'lhp.TenLopHocPhan');

        // T√¨m ki·∫øm
        if ($search = $request->input('search')) {
            $query->where(function ($q) use ($search) {
                $q->where('bkt.TenBaiKiemTra', 'like', "%{$search}%")
                    ->orWhere('bkt.MoTa', 'like', "%{$search}%")
                    ->orWhere('lhp.TenLopHocPhan', 'like', "%{$search}%");
            });
        }

        // L·ªçc theo l·ªõp h·ªçc ph·∫ßn
        if ($maLopHocPhan = $request->input('filterClass')) {
            $query->where('bkt.MaLopHocPhan', $maLopHocPhan);
        }

        // Ph√¢n trang
        $perPage = $request->input('itemsPerPage', 10);
        $baiKiemTras = $query->paginate($perPage);

        $lopHocPhan = DB::table('lop_hoc_phan')
            ->where('MaNguoiTao', Auth::id())
            ->select('MaLopHocPhan', 'TenLopHocPhan')
            ->get();

        return view('giangvien.quanLyBaiKiemTra.danhSachBaiKiemTra', compact('lopHocPhan', 'baiKiemTras'));
    }

    public function hienFormThemBaiKiemTra()
    {
        $lopHocPhan = DB::table('lop_hoc_phan')
            ->where('MaNguoiTao', Auth::id())
            ->select('MaLopHocPhan', 'TenLopHocPhan')
            ->get();

        return view('giangvien.quanLyBaiKiemTra.themBaiKiemTra', compact('lopHocPhan'));
    }

    public function themBaiKiemTra(Request $request, EmailService $emailService)
    {
        $request->validate([
            'quizName' => 'required|string|max:255',
            'classId' => 'required|integer|exists:lop_hoc_phan,MaLopHocPhan',
            'startTime' => 'required|date|after:now',
            'endTime' => 'required|date|after:startTime',
            'description' => 'nullable|string|max:255',
            'status' => 'required|in:0,1',
            'questions.*.cauHoi' => 'required|string',
            'questions.*.dapAnA' => 'required|string',
            'questions.*.dapAnB' => 'required|string',
            'questions.*.dapAnC' => 'required|string',
            'questions.*.dapAnD' => 'required|string',
            'questions.*.dapAnDung' => 'required|in:A,B,C,D',
        ], [
            'quizName.required' => 'T√™n b√†i ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'classId.required' => 'Vui l√≤ng ch·ªçn l·ªõp h·ªçc ph·∫ßn.',
            'classId.exists' => 'L·ªõp h·ªçc ph·∫ßn kh√¥ng t·ªìn t·∫°i.',
            'startTime.required' => 'Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'startTime.after' => 'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i sau th·ªùi ƒëi·ªÉm hi·ªán t·∫°i.',
            'endTime.required' => 'Th·ªùi gian k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'endTime.after' => 'Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.',
            'description.max' => 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',
            'status.required' => 'Vui l√≤ng ch·ªçn tr·∫°ng th√°i.',
            'status.in' => 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.',
            'questions.*.cauHoi.required' => 'N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnA.required' => 'ƒê√°p √°n A kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnB.required' => 'ƒê√°p √°n B kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnC.required' => 'ƒê√°p √°n C kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnD.required' => 'ƒê√°p √°n D kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnDung.required' => 'Vui l√≤ng ch·ªçn ƒë√°p √°n ƒë√∫ng.',
            'questions.*.dapAnDung.in' => 'ƒê√°p √°n ƒë√∫ng ph·∫£i l√† A, B, C ho·∫∑c D.',
        ]);

        try {
            DB::beginTransaction();

            $baiKiemTra = BaiKiemTra::create([
                'MaLopHocPhan' => $request->classId,
                'MaGiangVien' => Auth::id(),
                'TenBaiKiemTra' => $request->quizName,
                'ThoiGianBatDau' => Carbon::parse($request->startTime),
                'ThoiGianKetThuc' => Carbon::parse($request->endTime),
                'MoTa' => $request->description,
                'TrangThai' => $request->status,
                'created_at' => now('Asia/Ho_Chi_Minh'),
                'updated_at' => now('Asia/Ho_Chi_Minh'),
            ]);

            foreach ($request->questions as $question) {
                CauHoiBaiKiemTra::create([
                    'MaBaiKiemTra' => $baiKiemTra->MaBaiKiemTra,
                    'CauHoi' => $question['cauHoi'],
                    'DapAnA' => $question['dapAnA'],
                    'DapAnB' => $question['dapAnB'],
                    'DapAnC' => $question['dapAnC'],
                    'DapAnD' => $question['dapAnD'],
                    'DapAnDung' => $question['dapAnDung'],
                    'created_at' => now('Asia/Ho_Chi_Minh'),
                    'updated_at' => now('Asia/Ho_Chi_Minh'),
                ]);
            }

            $noiDungThongBao = 'Gi·∫£ng vi√™n ƒë√£ t·∫°o b√†i ki·ªÉm tra m·ªõi: "' . $request->quizName . '" v√†o l·ªõp h·ªçc ph·∫ßn. Vui l√≤ng ki·ªÉm tra v√† chu·∫©n b·ªã.';
            ThongBao::create([
                'MaLopHocPhan' => $request->classId,
                'MaNguoiTao' => Auth::id(),
                'NoiDung' => $noiDungThongBao,
                'ThoiGianTao' => now('Asia/Ho_Chi_Minh'),
                'TrangThai' => 1,
                'created_at' => now('Asia/Ho_Chi_Minh'),
                'updated_at' => now('Asia/Ho_Chi_Minh'),
            ]);

            $emails = DB::table('danh_sach_lop')
                ->join('nguoi_dung', 'danh_sach_lop.MaSinhVien', '=', 'nguoi_dung.MaNguoiDung')
                ->where('danh_sach_lop.MaLopHocPhan', $request->classId)
                ->select('nguoi_dung.MaNguoiDung', 'nguoi_dung.HoTen', 'nguoi_dung.Email')
                ->get();

            $start = Carbon::parse($baiKiemTra->ThoiGianBatDau)->format('H:i:s d/m/Y');
            $end = Carbon::parse($baiKiemTra->ThoiGianKetThuc)->format('H:i:s d/m/Y');
            foreach ($emails as $email) {
                $studentName = $email->HoTen;
                $emailAddress = $email->Email;
                $body = "Ch√†o {$studentName},<br><br>";
                $body .= "{$noiDungThongBao}<br><br>";
                $body .= "üìÑ T√™n b√†i ki·ªÉm tra: {$baiKiemTra->TenBaiKiemTra}<br>";
                $body .= "üìÑ M√¥ t·∫£ b√†i ki·ªÉm tra: {$baiKiemTra->MoTa}<br>";
                $body .= "‚åö Th·ªùi gian b·∫Øt ƒë·∫ßu: {$start}<br>";
                $body .= "‚è≥ Th·ªùi gian k·∫øt th√∫c: {$end}<br>";
                $body .= "<br>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng managing b√†i gi·∫£ng tr·ª±c tuy·∫øn.";
                try {
                    $emailService->sendEmail($emailAddress, 'Th√™m b√†i ki·ªÉm tra m·ªõi', $body);
                } catch (\Throwable $e) {
                    Log::error("Kh√¥ng th·ªÉ g·ª≠i email ƒë·∫øn {$emailAddress}: " . $e->getMessage());
                }
            }

            DB::commit();
            return redirect()->route('giangvien.bai-kiem-tra.danh-sach')->with('success', 'Th√™m b√†i ki·ªÉm tra v√† c√°c c√¢u h·ªèi th√†nh c√¥ng.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('errorSystem', 'L·ªói khi th√™m b√†i ki·ªÉm tra: ' . $e->getMessage());
        }
    }

    public function importBaiKiemTra(Request $request, EmailService $emailService)
    {
        $request->validate([
            'MaLopHocPhan' => 'required|integer',
            'file' => 'required|file|mimes:xlsx',
        ], [
            'MaLopHocPhan.required' => 'Vui l√≤ng ch·ªçn l·ªõp h·ªçc ph·∫ßn.',
            'MaLopHocPhan.integer' => 'L·ªõp h·ªçc ph·∫ßn kh√¥ng h·ª£p l·ªá.',
            'file.required' => 'Vui l√≤ng ch·ªçn file Excel.',
            'file.file' => 'T·ªáp t·∫£i l√™n ph·∫£i l√† m·ªôt file.',
            'file.mimes' => 'File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .xlsx.',
        ]);

        try {
            $file = $request->file('file');
            $spreadsheet = IOFactory::load($file->getRealPath());
            $sheet = $spreadsheet->getActiveSheet();

            $tenBaiKiemTra = trim($sheet->getCell('B1')->getValue());
            $moTa = trim($sheet->getCell('B4')->getValue());
            $trangThaiRaw = strtolower(trim($sheet->getCell('B5')->getValue()));
            $thoiGianBatDauRaw = $sheet->getCell('B2')->getValue();
            $thoiGianKetThucRaw = $sheet->getCell('B3')->getValue();

            try {
                $thoiGianBatDau = is_numeric($thoiGianBatDauRaw)
                    ? Carbon::instance(Date::excelToDateTimeObject($thoiGianBatDauRaw))
                    : Carbon::parse($thoiGianBatDauRaw);

                $thoiGianKetThuc = is_numeric($thoiGianKetThucRaw)
                    ? Carbon::instance(Date::excelToDateTimeObject($thoiGianKetThucRaw))
                    : Carbon::parse($thoiGianKetThucRaw);
            } catch (\Exception $e) {
                return redirect()->back()->with('warning', 'ƒê·ªãnh d·∫°ng ng√†y gi·ªù trong √¥ B2 ho·∫∑c B3 kh√¥ng h·ª£p l·ªá.');
            }

            if (!in_array($trangThaiRaw, ['hi·ªán', '·∫©n'])) {
                return redirect()->back()->with('warning', 'Tr·∫°ng th√°i ph·∫£i l√† "hi·ªán" ho·∫∑c "·∫©n".');
            }

            $trangThai = $trangThaiRaw === 'hi·ªán' ? 1 : 0;
            if (
                empty($tenBaiKiemTra) ||
                empty($thoiGianBatDau) ||
                empty($thoiGianKetThuc) ||
                empty($moTa) ||
                empty($trangThai)
            ) {
                return redirect()->back()->with('warning', 'Th√¥ng tin b√†i ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng.');
            }

            if ($thoiGianKetThuc->lessThanOrEqualTo($thoiGianBatDau)) {
                return redirect()->back()->with('warning', 'Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.');
            }

            if ($thoiGianBatDau->lessThan(Carbon::now())) {
                return redirect()->back()->with('warning', 'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i l·ªõn h∆°n th·ªùi ƒëi·ªÉm hi·ªán t·∫°i.');
            }

            DB::beginTransaction();

            $maLopHocPhan = $request->input('MaLopHocPhan');
            $baiKiemTra = BaiKiemTra::create([
                'MaLopHocPhan' => $maLopHocPhan,
                'MaGiangVien' => Auth::id(),
                'TenBaiKiemTra' => $tenBaiKiemTra,
                'ThoiGianBatDau' => $thoiGianBatDau,
                'ThoiGianKetThuc' => $thoiGianKetThuc,
                'MoTa' => $moTa,
                'TrangThai' => $trangThai,
                'created_at' => now('Asia/Ho_Chi_Minh'),
                'updated_at' => now('Asia/Ho_Chi_Minh')
            ]);

            $highestRow = $sheet->getHighestRow();
            $errors = [];

            for ($row = 7; $row <= $highestRow; $row++) {
                $rowValues = [
                    $sheet->getCell("A$row")->getValue(),
                    $sheet->getCell("B$row")->getValue(),
                    $sheet->getCell("C$row")->getValue(),
                    $sheet->getCell("D$row")->getValue(),
                    $sheet->getCell("E$row")->getValue(),
                    $sheet->getCell("F$row")->getValue(),
                ];

                if (collect($rowValues)->every(fn($v) => is_null($v) || trim($v) === '')) {
                    continue;
                }

                $cauHoi = trim($rowValues[0]);
                $dapAnA = trim($rowValues[1]);
                $dapAnB = trim($rowValues[2]);
                $dapAnC = trim($rowValues[3]);
                $dapAnD = trim($rowValues[4]);
                $dapAnDung = strtoupper(trim($rowValues[5]));

                if (empty($cauHoi)) {
                    $errors[] = "D√≤ng $row: Thi·∫øu c√¢u h·ªèi.";
                    continue;
                }

                if (empty($dapAnA) || empty($dapAnB) || empty($dapAnC) || empty($dapAnD)) {
                    $errors[] = "D√≤ng $row: Thi·∫øu m·ªôt ho·∫∑c nhi·ªÅu ƒë√°p √°n A/B/C/D.";
                    continue;
                }

                if (!in_array($dapAnDung, ['A', 'B', 'C', 'D'])) {
                    $errors[] = "D√≤ng $row: ƒê√°p √°n ƒë√∫ng ph·∫£i l√† m·ªôt trong A, B, C, D.";
                    continue;
                }

                CauHoiBaiKiemTra::create([
                    'MaBaiKiemTra' => $baiKiemTra->MaBaiKiemTra,
                    'CauHoi' => $cauHoi,
                    'DapAnA' => $dapAnA,
                    'DapAnB' => $dapAnB,
                    'DapAnC' => $dapAnC,
                    'DapAnD' => $dapAnD,
                    'DapAnDung' => $dapAnDung,
                    'created_at' => now('Asia/Ho_Chi_Minh'),
                    'updated_at' => now('Asia/Ho_Chi_Minh')
                ]);
            }

            if (!empty($errors)) {
                DB::rollBack();
                $message = 'Import th·∫•t b·∫°i. C√≥ l·ªói trong file Excel.';
                $message .= '<br>L·ªói:<ul><li>' . implode('</li><li>', $errors) . '</li></ul>';
                return redirect()->back()->with('warning', $message);
            }
            if ($baiKiemTra->TrangThai == 1) {
                $noiDungThongBao = 'Gi·∫£ng vi√™n ƒë√£ t·∫°o b√†i ki·ªÉm tra m·ªõi: "' . $tenBaiKiemTra . '" v√†o l·ªõp h·ªçc ph·∫ßn. Vui l√≤ng ki·ªÉm tra v√† chu·∫©n b·ªã.';
                ThongBao::create([
                    'MaLopHocPhan' => $maLopHocPhan,
                    'MaNguoiTao' => Auth::id(),
                    'NoiDung' => $noiDungThongBao,
                    'ThoiGianTao' => now('Asia/Ho_Chi_Minh'),
                    'TrangThai' => 1,
                    'created_at' => now('Asia/Ho_Chi_Minh'),
                    'updated_at' => now('Asia/Ho_Chi_Minh')
                ]);

                $emails = DB::table('danh_sach_lop')
                    ->join('nguoi_dung', 'danh_sach_lop.MaSinhVien', '=', 'nguoi_dung.MaNguoiDung')
                    ->where('danh_sach_lop.MaLopHocPhan', $maLopHocPhan)
                    ->select('nguoi_dung.MaNguoiDung', 'nguoi_dung.HoTen', 'nguoi_dung.Email')
                    ->get();

                $start = \Carbon\Carbon::parse($baiKiemTra->ThoiGianBatDau)->format('H:i:s d/m/Y');
                $end = \Carbon\Carbon::parse($baiKiemTra->ThoiGianKetThuc)->format('H:i:s d/m/Y');
                foreach ($emails as $email) {
                    $studentName = $email->HoTen;
                    $emailAddress = $email->Email;
                    $body = "Ch√†o {$studentName},<br><br>";
                    $body .= "{$noiDungThongBao}<br><br>";
                    $body .= "üìÑ T√™n b√†i ki·ªÉm tra: {$baiKiemTra->TenBaiKiemTra}<br>";
                    $body .= "üìÑ M√¥ t·∫£ b√†i ki·ªÉm tra: {$baiKiemTra->MoTa}<br>";
                    $body .= "‚åö Th·ªùi gian b·∫Øt ƒë·∫ßu: {$start}<br>";
                    $body .= "‚è≥ Th·ªùi gian k·∫øt th√∫c: {$end}<br>";
                    $body .= "<br>Tr√¢n tr·ªçng,<br>H·ªá th·ªëng managing b√†i gi·∫£ng tr·ª±c tuy·∫øn.";
                    try {
                        $emailService->sendEmail($emailAddress, 'Th√™m b√†i ki·ªÉm tra m·ªõi', $body);
                    } catch (\Throwable $e) {
                        Log::error("Kh√¥ng th·ªÉ g·ª≠i email ƒë·∫øn {$emailAddress}: " . $e->getMessage());
                    }
                }
            }

            DB::commit();
            return redirect()->back()->with('success', 'Import b√†i ki·ªÉm tra v√† c√°c c√¢u h·ªèi th√†nh c√¥ng.');
        } catch (\Exception $e) {
            DB::rollBack();
            $message = 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω.';
            $message .= '<br><strong>Chi ti·∫øt:</strong><ul><li>' . e($e->getMessage()) . '</li></ul>';
            return redirect()->back()->with('warning', $message);
        }
    }

    public function nhanBanBaiKiemTra(Request $request)
    {
        $request->validate([
            'MaBaiKiemTra' => 'required|integer|exists:bai_kiem_tra,MaBaiKiemTra',
            'MaLopHocPhan' => 'required|integer|exists:lop_hoc_phan,MaLopHocPhan',
            'TrangThai' => 'required|in:0,1',
        ], [
            'MaBaiKiemTra.required' => 'Vui l√≤ng ch·ªçn b√†i ki·ªÉm tra c·∫ßn nh√¢n b·∫£n.',
            'MaLopHocPhan.required' => 'Vui l√≤ng ch·ªçn l·ªõp h·ªçc ph·∫ßn ƒë√≠ch.',
            'MaBaiKiemTra.exists' => 'B√†i ki·ªÉm tra kh√¥ng t·ªìn t·∫°i',
            'MaLopHocPhan.exists' => 'L·ªõp h·ªçc ph·∫ßn kh√¥ng t·ªìn t·∫°i',
            'TrangThai.required' => 'Vui l√≤ng ch·ªçn tr·∫°ng th√°i.',
        ]);

        DB::beginTransaction();

        try {
            $baiGoc = BaiKiemTra::findOrFail($request->MaBaiKiemTra);

            if ($baiGoc->MaGiangVien != Auth::id()) {
                return redirect()->back()->with('errorSystem', 'B·∫°n kh√¥ng c√≥ quy·ªÅn nh√¢n b·∫£n b√†i ki·ªÉm tra n√†y.');
            }

            $baiMoi = BaiKiemTra::create([
                'MaLopHocPhan' => $request->MaLopHocPhan,
                'MaGiangVien' => Auth::id(),
                'TenBaiKiemTra' => 'B·∫£n sao c·ªßa ' .  $baiGoc->TenBaiKiemTra,
                'ThoiGianBatDau' => $baiGoc->ThoiGianBatDau,
                'ThoiGianKetThuc' => $baiGoc->ThoiGianKetThuc,
                'MoTa' => $baiGoc->MoTa,
                'TrangThai' => $request->TrangThai,
                'created_at' => now('Asia/Ho_Chi_Minh'),
                'updated_at' => now('Asia/Ho_Chi_Minh')
            ]);

            $cauHoiGoc = CauHoiBaiKiemTra::where('MaBaiKiemTra', $baiGoc->MaBaiKiemTra)->get();

            foreach ($cauHoiGoc as $cauHoi) {
                CauHoiBaiKiemTra::create([
                    'MaBaiKiemTra' => $baiMoi->MaBaiKiemTra,
                    'CauHoi' => $cauHoi->CauHoi,
                    'DapAnA' => $cauHoi->DapAnA,
                    'DapAnB' => $cauHoi->DapAnB,
                    'DapAnC' => $cauHoi->DapAnC,
                    'DapAnD' => $cauHoi->DapAnD,
                    'DapAnDung' => $cauHoi->DapAnDung,
                    'created_at' => now('Asia/Ho_Chi_Minh'),
                    'updated_at' => now('Asia/Ho_Chi_Minh')
                ]);
            }

            DB::commit();
            return redirect()->back()->with('success', 'Nh√¢n b·∫£n b√†i ki·ªÉm tra th√†nh c√¥ng.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('errorSystem', 'L·ªói khi nh√¢n b·∫£n: ' . $e->getMessage());
        }
    }

    public function chiTietBaiKiemTra($id)
    {
        $baiKiemTra = BaiKiemTra::where('MaBaiKiemTra', $id)
            ->where('MaGiangVien', Auth::id())
            ->firstOrFail();

        $cauHois = CauHoiBaiKiemTra::where('MaBaiKiemTra', $id)->get();

        $soLuongSinhVien = DB::table('ket_qua_bai_kiem_tra')
            ->where('MaBaiKiemTra', $id)
            ->distinct('MaSinhVien')
            ->count('MaSinhVien');

        return view('giangvien.quanLyBaiKiemTra.chiTietBaiKiemTra', compact('baiKiemTra', 'cauHois', 'soLuongSinhVien'));
    }

    public function hienFormSuaBaiKiemTra($id)
    {
        $baiKiemTra = BaiKiemTra::where('MaBaiKiemTra', $id)
            ->where('MaGiangVien', Auth::id())
            ->firstOrFail();

        $lopHocPhan = DB::table('lop_hoc_phan')
            ->where('MaNguoiTao', Auth::id())
            ->select('MaLopHocPhan', 'TenLopHocPhan')
            ->get();

        $cauHois = CauHoiBaiKiemTra::where('MaBaiKiemTra', $id)->get();

        $soLuongSinhVien = DB::table('ket_qua_bai_kiem_tra')
            ->where('MaBaiKiemTra', $id)
            ->distinct('MaSinhVien')
            ->count('MaSinhVien');

        return view('giangvien.quanLyBaiKiemTra.suaBaiKiemTra', compact('baiKiemTra', 'lopHocPhan', 'cauHois', 'soLuongSinhVien'));
    }

    public function capNhatBaiKiemTra(Request $request, $id)
    {
        $baiKiemTra = BaiKiemTra::where('MaBaiKiemTra', $id)
            ->where('MaGiangVien', Auth::id())
            ->firstOrFail();

        $soLuongSinhVien = DB::table('ket_qua_bai_kiem_tra')
            ->where('MaBaiKiemTra', $id)
            ->distinct('MaSinhVien')
            ->count('MaSinhVien');

        if ($soLuongSinhVien > 0) {
            return redirect()->back()->with('errorSystem', 'Kh√¥ng th·ªÉ s·ª≠a b√†i ki·ªÉm tra v√¨ ƒë√£ c√≥ sinh vi√™n l√†m b√†i.');
        }

        $request->validate([
            'quizName' => 'required|string|max:255',
            'classId' => 'required|integer|exists:lop_hoc_phan,MaLopHocPhan',
            'startTime' => 'required|date|after:now',
            'endTime' => 'required|date|after:startTime',
            'description' => 'nullable|string|max:255',
            'status' => 'required|in:0,1',
            'questions.*.cauHoi' => 'required|string',
            'questions.*.dapAnA' => 'required|string',
            'questions.*.dapAnB' => 'required|string',
            'questions.*.dapAnC' => 'required|string',
            'questions.*.dapAnD' => 'required|string',
            'questions.*.dapAnDung' => 'required|in:A,B,C,D',
        ], [
            'quizName.required' => 'T√™n b√†i ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'classId.required' => 'Vui l√≤ng ch·ªçn l·ªõp h·ªçc ph·∫ßn.',
            'classId.exists' => 'L·ªõp h·ªçc ph·∫ßn kh√¥ng t·ªìn t·∫°i.',
            'startTime.required' => 'Th·ªùi gian b·∫Øt ƒë·∫ßu kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'startTime.after' => 'Th·ªùi gian b·∫Øt ƒë·∫ßu ph·∫£i sau th·ªùi ƒëi·ªÉm hi·ªán t·∫°i.',
            'endTime.required' => 'Th·ªùi gian k·∫øt th√∫c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'endTime.after' => 'Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu.',
            'description.max' => 'M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 255 k√Ω t·ª±.',
            'status.required' => 'Vui l√≤ng ch·ªçn tr·∫°ng th√°i.',
            'status.in' => 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá.',
            'questions.*.cauHoi.required' => 'N·ªôi dung c√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnA.required' => 'ƒê√°p √°n A kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnB.required' => 'ƒê√°p √°n B kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnC.required' => 'ƒê√°p √°n C kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnD.required' => 'ƒê√°p √°n D kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'questions.*.dapAnDung.required' => 'Vui l√≤ng ch·ªçn ƒë√°p √°n ƒë√∫ng.',
            'questions.*.dapAnDung.in' => 'ƒê√°p √°n ƒë√∫ng ph·∫£i l√† A, B, C ho·∫∑c D.',
        ]);

        try {
            DB::beginTransaction();

            $baiKiemTra->update([
                'MaLopHocPhan' => $request->classId,
                'TenBaiKiemTra' => $request->quizName,
                'ThoiGianBatDau' => Carbon::parse($request->startTime),
                'ThoiGianKetThuc' => Carbon::parse($request->endTime),
                'MoTa' => $request->description,
                'TrangThai' => $request->status,
                'updated_at' => now('Asia/Ho_Chi_Minh'),
            ]);

            CauHoiBaiKiemTra::where('MaBaiKiemTra', $id)->delete();

            foreach ($request->questions as $question) {
                CauHoiBaiKiemTra::create([
                    'MaBaiKiemTra' => $baiKiemTra->MaBaiKiemTra,
                    'CauHoi' => $question['cauHoi'],
                    'DapAnA' => $question['dapAnA'],
                    'DapAnB' => $question['dapAnB'],
                    'DapAnC' => $question['dapAnC'],
                    'DapAnD' => $question['dapAnD'],
                    'DapAnDung' => $question['dapAnDung'],
                    'created_at' => now('Asia/Ho_Chi_Minh'),
                    'updated_at' => now('Asia/Ho_Chi_Minh'),
                ]);
            }

            DB::commit();
            return redirect()->route('giangvien.bai-kiem-tra.danh-sach')->with('success', 'C·∫≠p nh·∫≠t b√†i ki·ªÉm tra th√†nh c√¥ng.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('errorSystem', 'L·ªói khi c·∫≠p nh·∫≠t b√†i ki·ªÉm tra: ' . $e->getMessage());
        }
    }

    public function xoaBaiKiemTra($id)
    {
        $baiKiemTra = BaiKiemTra::where('MaBaiKiemTra', $id)
            ->where('MaGiangVien', Auth::id())
            ->firstOrFail();

        $soLuongSinhVien = DB::table('ket_qua_bai_kiem_tra')
            ->where('MaBaiKiemTra', $id)
            ->distinct('MaSinhVien')
            ->count('MaSinhVien');

        if ($soLuongSinhVien > 0) {
            return redirect()->back()->with('errorSystem', 'Kh√¥ng th·ªÉ x√≥a b√†i ki·ªÉm tra v√¨ ƒë√£ c√≥ sinh vi√™n l√†m b√†i.');
        }

        try {
            DB::beginTransaction();
            CauHoiBaiKiemTra::where('MaBaiKiemTra', $id)->delete();
            $baiKiemTra->delete();
            DB::commit();
            return redirect()->back()->with('success', 'X√≥a b√†i ki·ªÉm tra th√†nh c√¥ng.');
        } catch (\Exception $e) {
            DB::rollBack();
            return redirect()->back()->with('errorSystem', 'L·ªói khi x√≥a b√†i ki·ªÉm tra: ' . $e->getMessage());
        }
    }
}
